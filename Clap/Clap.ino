// Mikrofon-Pin (OUT des MAX9814 an GPIO 34)
#define MIC_PIN 34

// L√§nge des Messfensters (wie lange Pegel gesammelt werden, in Millisekunden)
const int sampleWindow = 30;

// Schwellenwerte f√ºr Klatscherkennung
const int DROP_THRESHOLD = 600;       // Der Signalwert muss nach dem Peak um mindestens diesen Wert abfallen
const int CLAP_COOLDOWN = 400;        // Zeit in ms, wie lange nach einem Klatscher keine weitere Erkennung erfolgen soll

// Raumpegel-Mittelwert alle 15 Sekunden berechnen
const unsigned long AVERAGE_DURATION = 15000;

// Zust√§nde der Klatscherkennung
enum ClapState { IDLE, PEAK_DETECTED };
ClapState state = IDLE;

int lastPeak = 0;                     // Speichert den letzten erkannten Spitzenwert
int maxPeak = 1000;                   // Dynamischer Maximalwert, an dem sich die Klatscherkennung orientiert
float clapThresholdFactor = 0.90;     // Klatscher m√ºssen 90‚ÄØ% oder mehr des h√∂chsten bisherigen Peaks haben

unsigned long lastClapTime = 0;       // Zeitpunkt des letzten Klatschereignisses
unsigned long averageStartTime = 0;   // Startzeitpunkt des aktuellen 15s-Durchschnittsintervalls
unsigned long averageSamples = 0;     // Anzahl gemessener Samples im aktuellen Intervall
unsigned long averageSum = 0;         // Summe aller Peaks im Intervall zur Mittelwertbildung

void setup() {
  Serial.begin(115200);               // Serielle Ausgabe starten
  averageStartTime = millis();        // Startzeit f√ºr Mittelwert setzen
  Serial.println("--- Mikrofonanalyse gestartet (dynamische Schwelle) ---");
}

void loop() {
  // ‚û§ 1. Kurzzeit-Messung der Lautst√§rke (Peak-to-Peak)
  unsigned long startMillis = millis();
  int signalMin = 4095;               // Startwert f√ºr Minimum (h√∂chstm√∂glicher ADC-Wert)
  int signalMax = 0;                  // Startwert f√ºr Maximum

  // Sammle in kurzer Zeit den Maximal- und Minimalwert des Signals
  while (millis() - startMillis < sampleWindow) {
    int sample = analogRead(MIC_PIN);  // Lese Rohwert vom Mikrofon
    if (sample > signalMax) signalMax = sample;
    if (sample < signalMin) signalMin = sample;
  }

  int peakToPeak = signalMax - signalMin;  // Differenz = Lautst√§rke/Amplitude

  // ‚û§ 2. Automatische Anpassung des Maximalwerts
  // Wenn der aktuelle Wert h√∂her ist als alle bisher gemessenen, aktualisiere den Maximalwert
  if (peakToPeak > maxPeak) {
    maxPeak = peakToPeak;
    Serial.print("‚öôÔ∏è Neuer Maximalwert erkannt: ");
    Serial.println(maxPeak);
  }

  // Schwelle f√ºr Klatscherkennung auf Basis des h√∂chsten Peaks
  int dynamicThreshold = (int)(maxPeak * clapThresholdFactor);

  // ‚û§ 3. Klatscherkennung per Zustandsmaschine
  switch (state) {
    case IDLE:
      // Wenn Lautst√§rke √ºber Schwelle liegt und genug Zeit seit letztem Klatscher vergangen ist
      if (peakToPeak > dynamicThreshold && millis() - lastClapTime > CLAP_COOLDOWN) {
        state = PEAK_DETECTED;
        lastPeak = peakToPeak;
      }
      break;

    case PEAK_DETECTED:
      // Wenn Lautst√§rke deutlich abf√§llt ‚Üí echter Klatscher
      if (peakToPeak < lastPeak - DROP_THRESHOLD) {
        Serial.print("üëè KLATSCH erkannt!  Peak: ");
        Serial.print(lastPeak);
        Serial.print(" | Schwelle: ");
        Serial.println(dynamicThreshold);
        lastClapTime = millis();
        state = IDLE;
      }
      // Sicherheitsr√ºckkehr nach 100 ms (z.‚ÄØB. bei St√∂rsignal)
      if (millis() - startMillis > 100) {
        state = IDLE;
      }
      break;
  }

  // ‚û§ 4. Sammle Daten f√ºr Mittelwert
  averageSum += peakToPeak;
  averageSamples++;

  // ‚û§ 5. Zeige alle 15 Sekunden den durchschnittlichen Raumpegel
  if (millis() - averageStartTime > AVERAGE_DURATION) {
    float avg = (float)averageSum / averageSamples;
    Serial.print("üå° Durchschnittsraumpegel (15s): ");
    Serial.println((int)avg);
    averageStartTime = millis();
    averageSum = 0;
    averageSamples = 0;
  }

  delay(10);  // kurze Pause f√ºr bessere Reaktionszeit
}